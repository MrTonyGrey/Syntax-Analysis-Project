/* The following are libraries in C for analysis */
#include <sys/stat.h>
#include <sys/types.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdio.h>

/* The following are variables used throughout the program */
int charClass;
int lexLen;
char nextChar;
int token;
int nextToken = -2;
char lexeme [100];
off_t fileSize = 0;
off_t getCharCount = 0;
FILE *in_fp, *fopen();

/* Function declarations */ 
void  addChar(); 
void  getChar(); 
void  getNonBlank(); 
int  lex();

/* Character classes */ 
#define LETTER 0 
#define DIGIT 1 
#define UNKNOWN 99

/* Token codes */ 
#define INT_LIT 10 
#define IDENT 11 
#define ASSIGN_OP 20 
#define ADD_OP 21 
#define SUB_OP 22 
#define MULT_OP 23 
#define DIV_OP 24 
#define LEFT_PAREN 25 
#define RIGHT_PAREN 26

/* This program will be implementing the following EBNF from page 199 

<expr> → <term> {(+ | -) <term>}
<term> → <factor> {(* | /) <factor>}
<factor> → id | int_constant | ( <expr> )

*/

// Declarations for functions <expr> and <stmt>
 void expr();
 void stmt();
 
 off_t fsize(const char *filename) // File size function
 {
    struct stat st; 
    if (stat(filename, &st) == 0)
    {
       return st.st_size;
    }
    return -1; 
}

main(int argc, char *argv[]) // main function 
{
  fileSize = fsize(argv[1]); // Get the size of the file
  if  ((in_fp = fopen(argv[1], "r")) == NULL)      // Open file  
    printf("ERROR - cannot open front.in \n"); 
  else 
  {     
    getChar();     
    do 
    {       
      lex();
      stmt();
     } while  (getCharCount < fileSize);  
   } 
}

/* An error function for accounting for errors */
void error(const char * msg)
{
  printf("Error");
  exit(0);
}
 
/* An expected error function for errors */
void expect_error(int EXPECTED_CODE)
{
  // this handles parsing expect errors
  //printf("Parsing Error: Expected %d got token %d, lexeme: %s \n", EXPECTED_CODE, nextToken, lexeme);
  printf("Error");
  exit(0);

}

void factor()
{
  printf("Enter <factor>\n");  // Choose between two RHSs

 
  if(nextToken == IDENT || nextToken == INT_LIT)  // Picks a RHSs
  {
    lex();  // Call lex()
  }
  else  // If the RHS is <expr>,  lex()  passes LEFT_PAREN, calls expr(), then checks for RIGHT_PAREN
  {
    if(nextToken == LEFT_PAREN)
    {
      lex();
      expr(); // Call expr()
      if(nextToken == RIGHT_PAREN)
      {
      lex();
      }
      else 
      {
        expect_error(RIGHT_PAREN); 
      }
    }
    else 
    {
      expect_error(LEFT_PAREN); // value was not a valid expression
    }
  }
  printf("Exit <factor>\n");
}

void term() 
{
  printf("Enter <term>\n");
  factor();  // parse the first factor
  while (nextToken == MULT_OP || nextToken == DIV_OP) // as long as the next is * or / get the next token and parse the next factor
  {
    lex(); // get the next token
    factor(); // parse the next factor
  }
  printf("Exit <term> \n");
}

void expr() 
{
  printf("Enter <expr> \n");
  // parse first term
  term();
  if(nextToken == IDENT)
  {
    error("Unexpected IDENT");
  }
  // as long as the next token is + or -, get the next token and parse the next term
  while(nextToken == ADD_OP || nextToken == SUB_OP)
  {
    lex(); 
    term();   
  }
  printf("Exit <expr> \n");
}

void stmt() 
{
  printf("Enter <stmt>\n");
  if (nextToken == IDENT)
  {
    lex(); // Call lex()
    if (nextToken == ASSIGN_OP)
    {
      lex();
      expr();
    }
    else 
    {
      expect_error(ASSIGN_OP); // Call expect_error function
    }
  } 
  printf("Exit <stmt>\n");
}

int  lookup(char  ch)  /* lookup - a function to lookup operators and parentheses and return the token */
{  
  switch (ch) 
  {
    case '(':
      addChar();      
      nextToken = LEFT_PAREN;      
      break;
    case ')':      
      addChar();      
      nextToken = RIGHT_PAREN;      
      break;
         
    case '+':      
      addChar();      
      nextToken = ADD_OP;      
      break;
    
    case '-':      
      addChar();      
      nextToken = SUB_OP;      
      break;
    
    case '*':      
      addChar();      
      nextToken = MULT_OP;      
      break;
    
    case  '/':      
      addChar();      
      nextToken = DIV_OP;      
      break;
      
    case '=':
      addChar();
      nextToken = ASSIGN_OP;
      break;
    
    case '\n':
      lexeme[0] = 'E';
      lexeme[1] = 'O';
      lexeme[2] = 'F';
      lexeme[3] = 0;
      nextToken = EOF;
      break;
    
    default:      
      addChar();      
      nextToken = EOF;      
      break;  
  }  
  return  nextToken; 
}
 
void addChar() 
{
  if (lexLen <= 98) 
  {
    lexeme[lexLen++] = nextChar;
    lexeme[lexLen] = 0;
  } 
  else 
  {
    printf("Error - lexeme is too long \n");
  }
}

void getChar() 
{
  if ((nextChar = getc(in_fp)) != EOF) 
  {
    if (isalpha(nextChar))
      charClass = LETTER;
    else if (isdigit(nextChar))
      charClass = DIGIT;
    else charClass = UNKNOWN;
  } 
  else 
  {
    charClass = EOF;
  }
  getCharCount++; // increment variable
}

void getNonBlank() 
{
  while (isspace(nextChar)) 
    getChar();
}

int lex() 
{
  lexLen = 0;
  getNonBlank();   
  switch (charClass) /* Parse identifiers */
  {
    case LETTER:
      addChar();
      getChar();
      
      while (charClass == LETTER || charClass == DIGIT) 
      {
        addChar();
        getChar();
      }
      nextToken = IDENT;
      break;       
     
    case DIGIT:
      addChar();
      getChar();
      while (charClass == DIGIT) 
      {
        addChar();
        getChar();
      }
      nextToken = INT_LIT;
      break;
  
    case UNKNOWN:
      lookup(nextChar); 
      getChar();
      break;
    case EOF:
      nextToken = EOF;
      lexeme[0] = 'E';
      lexeme[1] = 'O';
      lexeme[2] = 'F';
      lexeme[3] = 0;
      break;
  }    // End of switch statement
  
  printf("Next token is: %d, Next lexeme is %s\n", nextToken, lexeme);
  return nextToken;
} 
/* End of function lex */
    
